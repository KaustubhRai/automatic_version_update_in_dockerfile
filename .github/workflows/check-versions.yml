name: Check Versions

on:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at 00:00 UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  check-versions:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Check Go Version
      id: check-go-version
      run: |
        GO_LATEST=$(curl -s https://go.dev/VERSION?m=text | head -n 1 | cut -d ' ' -f 1)
        GO_CURRENT=$(grep -oP '(?<=GO_VERSION=)\d+\.\d+\.\d+' Dockerfile)
        if [ "$GO_LATEST" != "$GO_CURRENT" ]; then
          echo "Go version $GO_LATEST is available (current: $GO_CURRENT)"
          echo "result=Go version $GO_LATEST is available (current: $GO_CURRENT)" >> $GITHUB_OUTPUT
        else
          echo "Go version $GO_CURRENT is up-to-date"
          echo "result=Go version $GO_CURRENT is up-to-date" >> $GITHUB_OUTPUT
        fi

    - name: Check Gitleaks Version
      id: check-gitleaks-version
      run: |
        GITLEAKS_LATEST=$(curl -sSL https://api.github.com/repos/gitleaks/gitleaks/releases/latest | jq -r '.tag_name' | sed 's/v//')
        GITLEAKS_CURRENT=$(grep -oP '(?<=GITLEAKS_VERSION=)\d+\.\d+\.\d+' Dockerfile)
        if [ "$GITLEAKS_LATEST" != "$GITLEAKS_CURRENT" ]; then
          echo "Gitleaks version $GITLEAKS_LATEST is available (current: $GITLEAKS_CURRENT)"
          echo "result=Gitleaks version $GITLEAKS_LATEST is available (current: $GITLEAKS_CURRENT)" >> $GITHUB_OUTPUT
        fi

    # Add similar steps for TruffleHog and Talisman

      - name: Send Notification
        if: contains(steps.check-go-version.outputs.result, 'is available') || contains(steps.check-gitleaks-version.outputs.result, 'is available')  # Check for both Go and Gitleaks updates
        run: |
          ISSUE_TITLE=""  # Initialize empty title
          ISSUE_BODY=""   # Initialize empty body

          # Check for Go update and add to title/body
          if [[ <span class="math-inline">\{\{ steps\.check\-go\-version\.outputs\.result \}\} \=\~ "available" \]\]; then  \# Use \=\~ for pattern matching
ISSUE\_TITLE\+\="New version of Go is available"
ISSUE\_BODY\+\="A new version of Go \(</span>{{ steps.check-go-version.outputs.result }}) is available. Please update the Dockerfile.\n\n"
          fi

          # Check for Gitleaks update and add to title/body
          if [[ ${{ steps.check-gitleaks-version.outputs.result }} =~ "available" ]]; then
            if [[ -z "<span class="math-inline">ISSUE\_TITLE" \]\]; then  \# Only add "and" if there's already content in title
ISSUE\_TITLE\+\="Gitleaks version is available"
else
ISSUE\_TITLE\+\=" and Gitleaks version is available"
fi
ISSUE\_BODY\+\="A new version of Gitleaks \(</span>{{ steps.check-gitleaks-version.outputs.result }}) is available. Consider updating.\n"
          fi

          # Create issue only if there's content in title and body
          if [[ -n "$ISSUE_TITLE" && -n "<span class="math-inline">ISSUE\_BODY" \]\]; then
ISSUE\_RESPONSE\=</span>(curl -X POST -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
                                 -H "Content-Type: application/json" \
                                 -d '{"title":"'"$ISSUE_TITLE"'","
