name: Check Versions

on:
  schedule:
    - cron: '0 0 * * 0' # Run every Sunday at 00:00 UTC
  workflow_dispatch: # Allow manual triggering

jobs:
  check-versions:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install jq
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Check Go Version
      id: check-go-version
      run: |
        GO_LATEST=$(curl -s https://go.dev/VERSION?m=text | head -n 1 | cut -d ' ' -f 1)
        GO_CURRENT=$(grep -oP '(?<=GO_VERSION=)\d+\.\d+\.\d+' Dockerfile)
        if [ "$GO_LATEST" != "$GO_CURRENT" ]; then
          echo "Go version $GO_LATEST is available (current: $GO_CURRENT)"
          echo "result=Go version $GO_LATEST is available (current: $GO_CURRENT)" >> $GITHUB_OUTPUT
        else
          echo "Go version $GO_CURRENT is up-to-date"
          echo "result=Go version $GO_CURRENT is up-to-date" >> $GITHUB_OUTPUT
        fi

    - name: Check Gitleaks Version
      run: |
        GITLEAKS_LATEST=$(curl -s https://api.github.com/repos/zricethezav/gitleaks/releases/latest | jq -r '.tag_name')
        GITLEAKS_CURRENT=$(grep -oP '(?<=GITLEAKS_VERSION=)\d+\.\d+\.\d+' Dockerfile)
        if [ "$GITLEAKS_LATEST" != "$GITLEAKS_CURRENT" ]; then
          echo "Gitleaks version $GITLEAKS_LATEST is available (current: $GITLEAKS_CURRENT)"
        fi

    # Add similar steps for TruffleHog and Talisman

    - name: Send Notification
      if: contains(steps.check-go-version.outputs.result, 'is available')
      run: |
        # Create a new issue on GitHub using the API
        ISSUE_TITLE="New version of Go is available"
        ISSUE_BODY="A new version of Go (${{ steps.check-go-version.outputs.result }}) is available. Please update the Dockerfile."
        ISSUE_RESPONSE=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                         -H "Content-Type: application/json" \
                         -d '{"title":"'"$ISSUE_TITLE"'","body":"'"$ISSUE_BODY"'"}' \
                         https://api.github.com/repos/${{ github.repository }}/issues)
        echo "New issue created: $ISSUE_RESPONSE"
